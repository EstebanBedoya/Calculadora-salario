{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","renderTable","informe","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","bruto","extra","neto","App","useState","horas","setHoras","valorHora","setValorHora","setInforme","className","Grid","container","direction","justify","alignItems","item","TextField","label","type","variant","value","onChange","e","target","style","marginTop","Button","onClick","soloInt","test","salario","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54ee1bc0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Grid, TextField, Button,\n  TableContainer,\n  TableHead,\n  TableCell,\n  Table,\n  TableBody,\n  Paper\n} from '@material-ui/core'\n// import {Alert} from '@material-ui/lab'\nimport { withStyles } from '@material-ui/core/styles';\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nexport const salario = (horas, valorHora) => {\n  const soloInt = /^\\d*$/ //expresion regular para solo permitir valores enteros positivos\n  let informe = { 'bruto': 0, 'extra': 0, 'neto': 0 }\n\n  if (!soloInt.test(horas) || !soloInt.test(valorHora)) return 'valores invalidos'\n\n  if (horas <= 60) {\n    if (horas > 48) {\n      informe['bruto'] = 48 * valorHora\n      informe['extra'] = (valorHora * 1.2) * (horas - 48)\n    } else {\n      informe['bruto'] = horas * valorHora\n    }\n    informe['neto'] = informe['bruto'] + informe['extra']\n    return informe\n  } else {\n    return 'valores invalidos'\n  }\n}\n\nconst renderTable = (informe) => {\n  if (informe === 'valores invalidos') {\n    return <h5>valores invalidos :'c</h5>\n  } else if (informe != null) {\n    return <TableContainer component={Paper}>\n      <Table aria-label=\"simple table\">\n        <TableHead >\n          <StyledTableCell component=\"th\" align=\"right\">Salario Bruto</StyledTableCell>\n          <StyledTableCell component=\"th\" align=\"right\">Extra</StyledTableCell>\n          <StyledTableCell component=\"th\" align=\"right\">Salario total neto</StyledTableCell>\n        </TableHead>\n\n        <TableBody>\n          <TableCell component=\"th\" align=\"center\">{informe.bruto}</TableCell>\n          <TableCell component=\"th\" align=\"center\">{informe.extra}</TableCell>\n          <TableCell component=\"th\" align=\"center\">{informe.neto}</TableCell>\n        </TableBody>\n      </Table>\n\n    </TableContainer>\n  }\n}\n\nfunction App() {\n  const [horas, setHoras] = useState('')\n  const [valorHora, setValorHora] = useState('')\n  const [informe, setInforme] = useState(null)\n\n  const changeHoras = (e) => {\n    setHoras(e.target.value)\n  }\n  const changevalorHora = (e) => {\n    setValorHora(e.target.value)\n  }\n\n  const calcular = () => {\n    setInforme(salario(horas, valorHora))\n    setValorHora('')\n    setHoras('')\n  }\n\n  return (\n    <div className='full'>\n      <Grid container direction='column' justify='center' alignItems='center'>\n        <Grid item>\n          <h1>Calculadora de salario</h1>\n        </Grid>\n        <Grid container item justify='center' alignItems='center'>\n          <Grid item>\n            <TextField\n              label=\"Horas trabajadas\"\n              type=\"number\"\n              variant=\"filled\"\n              value={horas}\n              onChange={changeHoras}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"valor por Hora\"\n              type=\"number\"\n              variant=\"filled\"\n              value={valorHora}\n              onChange={changevalorHora}\n            />\n          </Grid>\n        </Grid>\n\n        <Grid item style={{ marginTop: 7 }}>\n          <Button variant=\"contained\" color=\"default\" onClick={calcular} >\n            Calcular\n        </Button>\n        </Grid>\n\n        <Grid item style={{ marginTop: 7 }}>\n          {\n            renderTable(informe)\n          }\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}